/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface;

import dementia_dss.CLIPS_connection;
import dementia_dss.Patient;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;

/**
 *
 * @author adria
 */
public class PrincipalWindow extends javax.swing.JFrame implements ActionListener {

    public Patient patient = new Patient();

    Initial_Description description = new Initial_Description();
    Patient_Info patientInfo = new Patient_Info(patient);
    General_Symptoms generalSymptoms = new General_Symptoms(patient);
    Motor_Symptoms motorSymptoms = new Motor_Symptoms(patient);
    Other_Pathologies otherPathologies = new Other_Pathologies(patient);
    Parkinson_Phase parkinsonPhase = new Parkinson_Phase(patient);
    Alzheimer_Phase alzheimerPhase = new Alzheimer_Phase(patient);

    /**
     * Creates new form PrincipalWindow
     */
    public PrincipalWindow() {
        initComponents();

        PrincipalPanel.add(description);

        description.setVisible(true);
        patientInfo.setVisible(false);
        generalSymptoms.setVisible(false);
        motorSymptoms.setVisible(false);
        otherPathologies.setVisible(false);
        alzheimerPhase.setVisible(false);
        parkinsonPhase.setVisible(false);

        manageButtons();
    }

    public void manageButtons() {
        if (description.isVisible()) {
            Back_Button.setEnabled(false);
            Next_Button.setEnabled(true);
            Submit_Button.setEnabled(false);
        } else if (patientInfo.isVisible() || generalSymptoms.isVisible() || motorSymptoms.isVisible()) {
            Back_Button.setEnabled(true);
            Next_Button.setEnabled(true);
            Submit_Button.setEnabled(false);
        } else if (otherPathologies.isVisible() || alzheimerPhase.isVisible() || parkinsonPhase.isVisible()) {
            Back_Button.setEnabled(true);
            Next_Button.setEnabled(false);
            Submit_Button.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PrincipalPanel = new javax.swing.JPanel();
        Next_Button = new javax.swing.JButton();
        Back_Button = new javax.swing.JButton();
        Submit_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1260, 777));
        getContentPane().setLayout(new java.awt.FlowLayout());

        PrincipalPanel.setLayout(new java.awt.GridBagLayout());
        getContentPane().add(PrincipalPanel);

        Next_Button.setText("Next");
        Next_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_ButtonActionPerformed(evt);
            }
        });
        getContentPane().add(Next_Button);

        Back_Button.setText("Back");
        Back_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back_ButtonActionPerformed(evt);
            }
        });
        getContentPane().add(Back_Button);

        Submit_Button.setText("Submit");
        Submit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Submit_ButtonActionPerformed(evt);
            }
        });
        getContentPane().add(Submit_Button);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Next_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_ButtonActionPerformed
        if (description.isVisible()) {
            description.setVisible(false);
            patientInfo.setVisible(true);
            generalSymptoms.setVisible(false);
            motorSymptoms.setVisible(false);
            otherPathologies.setVisible(false);

            PrincipalPanel.add(patientInfo);
        } else if (patientInfo.isVisible()) {
            patientInfo.SaveInfo();
            description.setVisible(false);
            patientInfo.setVisible(false);
            generalSymptoms.setVisible(true);
            motorSymptoms.setVisible(false);
            otherPathologies.setVisible(false);

            PrincipalPanel.add(generalSymptoms);
        } else if (generalSymptoms.isVisible()) {
            generalSymptoms.SaveInfo();
            description.setVisible(false);
            patientInfo.setVisible(false);
            generalSymptoms.setVisible(false);
            motorSymptoms.setVisible(true);
            otherPathologies.setVisible(false);

            PrincipalPanel.add(motorSymptoms);
        } else if (motorSymptoms.isVisible()) {
            motorSymptoms.SaveInfo();
            description.setVisible(false);
            patientInfo.setVisible(false);
            generalSymptoms.setVisible(false);
            motorSymptoms.setVisible(false);
            otherPathologies.setVisible(true);

            PrincipalPanel.add(otherPathologies);
        }

        PrincipalPanel.validate();
        manageButtons();

    }//GEN-LAST:event_Next_ButtonActionPerformed

    private void Back_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back_ButtonActionPerformed
        if (patientInfo.isVisible()) {
            patientInfo.SaveInfo();
            description.setVisible(true);
            patientInfo.setVisible(false);
            generalSymptoms.setVisible(false);
            motorSymptoms.setVisible(false);
            otherPathologies.setVisible(false);

            PrincipalPanel.add(description);
        } else if (generalSymptoms.isVisible()) {
            generalSymptoms.SaveInfo();
            description.setVisible(false);
            patientInfo.setVisible(true);
            generalSymptoms.setVisible(false);
            motorSymptoms.setVisible(false);
            otherPathologies.setVisible(false);

            PrincipalPanel.add(patientInfo);
        } else if (motorSymptoms.isVisible()) {
            motorSymptoms.SaveInfo();
            description.setVisible(false);
            patientInfo.setVisible(false);
            generalSymptoms.setVisible(true);
            motorSymptoms.setVisible(false);
            otherPathologies.setVisible(false);

            PrincipalPanel.add(generalSymptoms);
        } else if (otherPathologies.isVisible()) {
            otherPathologies.SaveInfo();
            description.setVisible(false);
            patientInfo.setVisible(false);
            generalSymptoms.setVisible(false);
            motorSymptoms.setVisible(true);
            otherPathologies.setVisible(false);

            PrincipalPanel.add(motorSymptoms);
        }

        PrincipalPanel.validate();
        manageButtons();
    }//GEN-LAST:event_Back_ButtonActionPerformed

    private void Submit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Submit_ButtonActionPerformed
        otherPathologies.SaveInfo();
        CLIPS_connection clipsConnect = new CLIPS_connection();
        clipsConnect.createPatientAssertion(patient);

        if (patient.getNoDementia()) {
            JOptionPane.showMessageDialog(null, "Diagnosis is: patient has NO DEMENTIA.");
        } else if (patient.getAlzheimer()) {
            JOptionPane.showMessageDialog(null, "Diagnosis is: patient has ALZHEIMER DISEASE.");
            otherPathologies.setVisible(false);
            alzheimerPhase.setVisible(true);
            PrincipalPanel.add(alzheimerPhase);
            // if (patient.get)
        } else if (patient.getParkinson()) {
            JOptionPane.showMessageDialog(null, "Diagnosis is: patient has PARKINSON DISEASE.");
            otherPathologies.setVisible(false);
            parkinsonPhase.setVisible(true);
            PrincipalPanel.add(parkinsonPhase);
        } else if (patient.getVascularD()) {
            JOptionPane.showMessageDialog(null, "Diagnosis is: patient has VASCULAR DEMENTIA.");
        }

        PrincipalPanel.validate();
        manageButtons();
    }//GEN-LAST:event_Submit_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back_Button;
    private javax.swing.JButton Next_Button;
    private javax.swing.JPanel PrincipalPanel;
    private javax.swing.JButton Submit_Button;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent ae) {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
